@page "/editquest"
@page "/editquest/{id:int}"
@inject NavigationManager NavigationManager
@inject QuestsClient Quests
@inject GenresClient Genres
@rendermode InteractiveServer

<PageTitle>@title</PageTitle>
<h3>@title</h3>

@if(genres is null || quest is null)
{
  <p><em>Loading...</em></p>
}
else
{
  <div class="row">
    <div class="col-md-4">
      <EditForm 
        FormName="EditQuest" 
        Model="@quest" 
        OnValidSubmit="HandleEditAsync"
        Enhance>
        <DataAnnotationsValidator />
        <div class="mb-3">
          <label for="name" class="form-label">Quest Name:</label>
          <InputText id="name" @bind-Value="quest.Name" class="form-control" />
          <ValidationMessage For="() => quest.Name" />
        </div>
        <div class="mb-3">
          <label for="desc" class="form-label">Quest Description (optional):</label>
          <InputText id="desc" @bind-Value="quest.Description" class="form-control" />
        </div>
        <div class="mb-3">
          <label for="genre" class="form-label">Quest Genre:</label>
          <InputSelect id="genre" @bind-Value="quest.GenreId" class="form-select" >
            <option value="" >Select genre</option>
            @foreach(var genre in genres){
              <option value="@genre.Id">@genre.Name</option>
            }
          
          </InputSelect>
          <ValidationMessage For="() => quest.GenreId" />
        </div>
        <div class="mb-3">
          <label for="importance" class="form-label">Quest Importance:</label>
          <InputNumber id="importance" @bind-Value="quest.Importance" class="form-control" />
          <ValidationMessage For="() => quest.Importance" />
        </div>
        <div class="mb-3">
          <label for="starttime" class="form-label">Start Time:</label>
          <InputDate id="starttime" Type="InputDateType.Time" @bind-Value="@quest.StartTime" />
        </div>
        <button type="submit" class="btn btn-primary">Submit!</button>
        <a role="button" class="btn btn-secondary" href="/">Cancel</a>
        
      </EditForm>
    </div>
  </div>
}

@code{ 
  private string title = String.Empty;
  [Parameter]
  public int? Id {get; set;}
  //quest details to przechodnia struktura aby utworzyc quest summary z uzyciem genrow
  [SupplyParameterFromForm]
  private QuestDetails? quest { get; set; } //na poczatku null, przy inicjalizacji sie ustawia
  private Genre[]? genres;

  //dlaczego nie genres=new genresClient().GetGenres?
  protected async override Task OnParametersSetAsync(){
    if(quest is not null){
      return;
    }
    
    if(Id is null){
      quest = new(){
        Name = string.Empty
      };
      title = "New quest";
    }
    else{
      quest = await Quests.GetQuestAsync(Id.Value);
      title = $"Edit {quest.Name}";
}
  }
  protected async override Task OnInitializedAsync(){
    genres = await Genres.GetGenresAsync();
  } 
  private async Task HandleEditAsync(){
    ArgumentNullException.ThrowIfNull(quest);

    if(Id is null){
      await Quests.AddQuestAsync(quest);
    }
    else{
      quest.Id = Id.Value;
      await Quests.UpdateQuestAsync(quest); 
    }

    NavigationManager.NavigateTo("/");
  }
}    
